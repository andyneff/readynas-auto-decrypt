#!/usr/bin/env bash

set -eu
# set -xv

# Load common functions
source "$(dirname "${BASH_SOURCE[0]}")/common.bsh"

# 1. Set variables up

set_disk_variables "${1}"

# 2. Wait for OS to put it's useless entry in

# for (( x=150; x>0; x-- )); do
#   found=$(sqlite3 -init "${INIT_SQL}" -readonly "${DB}" "
#           SELECT EXISTS (SELECT 1 FROM 'usb_storage'
#                          WHERE uid='${uid}' LIMIT 1);")
#   if [ "${found}" = "1" ]; then
#     break
#   fi
#   /usr/bin/rnutil rn_lcd -s "Wait4db $x" -p 1 -e 5 -k 478
#   sleep 2
# done

# if [ "${found}" = "0" ]; then
#   echo "Readynasd didn't create a record for me to use, giving up..." >&2
#   exit 1
# fi


# 2. Find decryption key

# Search for 10 mintues, just like on boot
search_until=$(($(date +%s)+${DECRIPTION_KEY_SEARCH_TIME}))

# Search for 10 minutes, or until the device is unplugged
while [ "${search_until}" -gt "$(date +%s)" ] && [ -e ${sys_path} ]; do
  # Search for keys
  for key in /media/*/data.key; do
    # If the key files exists and check to see if it unlocks the drive
    if [ -e "${key}" ] && cryptsetup luksOpen --test-passphrase --key-file "${key}" "${devname}"; then
      good_key="${key}"
      break 2
    fi
  done
  timeleft=$((${search_until} - $(date +%s)))

  message="     Waiting for decryption key to be inserted. ${timeleft}s left"
  for (( offset=0; offset<50; offset++ )); do
    /usr/bin/rnutil rn_lcd -s "${message:offset}" -p 1 -e 1 -k 478
    sleep 0.2
  done
done

/usr/bin/rnutil rn_lcd -s "Key found!" -p 1 -e 5 -k 478

# 3. Auto decrypt and mount

# If good key found
if [ -n "${good_key+set}" ]; then
  # cryptsetup close doesn't work if you unplug without unmounting, so we test
  # the the key, and then look for an available name
  dev_mapper_name="$(get_dev_mapper_name "${name}")"
  dev_mapper_location="/dev/mapper/${dev_mapper_name}"

  # Activate luks mount
  cryptsetup luksOpen --key-file "${good_key}" "${devname}" "${dev_mapper_name}"

  set_disk_variables_unencrypted "${dev_mapper_location}" "${serial}"

  # Mount it
  mkdir -p "/${mount_location}"
  mount "${dev_mapper_location}" /"${mount_location}"

# 5. Update database and files

  fs_type="$(mount_type /"${mount_location}" | head -n 1)"
  fs_type="${fs_type//\'/\'\'}"

  # The 1 is for is_connected, I'm pretty sure
  if [ ! -f "${STORAGE_CONF}" ]; then
    touch "${STORAGE_CONF}"
    chown admin:admin "${STORAGE_CONF}"
    chmod 600 "${STORAGE_CONF}"
  fi

  # When you unmount ANY usb device, something in readynas will decide "You know
  # what, your encrypted volume isn't REALLY mounted" and remove it from the
  # databases. So I constantly monitor it and remove ie

  # While the disk is still mounted...
  while mount | grep "${dev_mapper_location} on /${mount_location}" &> /dev/null; do
    if ! grep "${uid}!!${name}!!${description}!!${size}!!1!!${last_connected_node}!!!!${link_speed}!!${location}!!${fs_type}!!" "${STORAGE_CONF}" &> /dev/null; then
      echo "Refreshing the database for ${name}" >&2
      # Add to the database
      update_database_entry
    fi
    # only check ever x seconds
    sleep 5
  done

  # A bit of cleanup that doesn't happen for some odd reason *shrugs*
  if [ -d "/${mount_location}" ]; then
    rmdir "/${mount_location}"
  fi
  if [ -b "${dev_mapper_location}" ]; then
    cryptsetup luksClose "${dev_mapper_name}"
  fi
fi

# Debugging
# sqlite3 -init "${INIT_SQL}" -readonly "${DB}" '
#     SELECT * FROM "usb_storage";
#     SELECT * FROM "share";
#     SELECT * FROM "zfs_attr";'
