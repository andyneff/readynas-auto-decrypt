#!/usr/bin/env bash

set -eu

set -xv

exec 1>/tmp/out
exec 2>/tmp/err

# Load common functions
source "$(dirname "${BASH_SOURCE[0]}")/common.bsh"

devname="${1}"
sys_path="/sys${2}"
entry_name="${3}"
serial="${4}"
uuid="${5}"
# this is an encoded field, printf will decode it
description="$(printf "${6}" | sed 's| *$||')"
size="${7}"
link_speed="${8}"
location="${9}"
# this is an encoded field, printf will decode it
fs_label="$(printf "${10:-NOLABEL}" | sed 's| *$||')"

name="$(get_name "${serial}-${uuid}" "${sys_path}")"

mount_location="media/${name}"

for key in /media/*/data.key; do
  # If the key files exists and check to see if it unlocks the drive
  if [ -e "${key}" ] && cryptsetup luksOpen --test-passphrase --key-file "${key}" "${devname}"; then

    # cryptseupt close doesn't work very often, so we test the
    # the key, and then look for an available name
    dev_mapper_name="${name}"

    declare -i count=0
    while [ -e "/dev/mapper/${dev_mapper_name}" ]; do
      dev_mapper_name="${name}_${count}"
      count+=1
    done

    # Activate luks mount
    cryptsetup luksOpen --key-file "${key}" "${devname}" "${dev_mapper_name}"

    # Mount it
    mkdir -p "/${mount_location}"
    mount /dev/mapper/"${dev_mapper_name}" /"${mount_location}"

    fs_type="$(mount_type /"${mount_location}" | head -n 1)"

    # Add to the database
    sqlite3 -init /data/data/nas_stuff/init.sql /var/readynasd/db.sq3 "
      INSERT OR IGNORE INTO 'usb_storage'
          ('name', 'device_size', 'is_connected') VALUES
          ('${name}', 0, 0);
      UPDATE 'usb_storage'
      SET uid = '${serial}-${uuid}',
          description = '${description}',
          device_size = ${size},
          is_connected = 1,
          last_connected_node = '$(basename "${devname}")',
          speed = ${link_speed},
          usbpath = '${location}',
          mount_point = '${mount_location}',
          fstype = '${fs_type}',
          label = '${fs_label}',
          serial = '${serial}'
      WHERE name = '${name}';"

    sqlite3 -init /data/data/nas_stuff/init.sql /var/readynasd/db.sq3 "
        INSERT INTO 'share'
          ('zfs_name', 'type', 'volume_id', 'name', 'path', 'comment', 'user_access',
           'group_access', 'everyone_access', 'non_owner_delete', 'user_id', 'group_id') VALUES
          ('${mount_location}', 'share', 'media', '${name}', '/${mount_location}', '${description}', 7, 7, 7, 0, 0, 0);"

    # share_id="$(sqlite3 /var/readynasd/db.sq3 "SELECT id FROM share WHERE zfs_name='${mount_location}';")"

    # sqlite3 /var/readynasd/db.sq3 "
    #     INSERT INTO 'zfs_attr'
    #       ('share_id', 'mb_quota', 'mb_reservation', 'mb_refquota', 'mb_refreservation',
    #        'compression', 'dedup', 'bit_rot_protection', 'auto_defrag') VALUES
    #       ('${share_id}', 0, 0, 0, 0, 0, 0, 0, 0);"

    # Stop searching
    break
  fi
done

# /usr/bin/rnutil rn_lcd -s "Hi" -p 1 -e 10 -k 478
IFS=$'\n'
echo $'ok\n'"${*}" > /tmp/foo

# Debugging
sqlite3 -init /data/data/nas_stuff/init.sql -readonly /var/readynasd/db.sq3 'SELECT * FROM "usb_storage"; SELECT * FROM "share"; SELECT * FROM "zfs_attr";'

# sqlite3 -init /data/data/nas_stuff/init.sql /var/readynasd/db.sq3 'DELETE FROM "usb_storage" where name="USB_HDD_2"; DELETE FROM "share" WHERE name="USB_HDD_2"'
